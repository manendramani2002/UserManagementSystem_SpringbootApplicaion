package com.example.demo.Utils;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import org.springframework.stereotype.Component;

import java.security.Key;
import java.util.Date;

@Component
public class JwtUtils {

    // Secret key (in production, load from application.yml)
    private final Key key = Keys.secretKeyFor(SignatureAlgorithm.HS256);

    // Token validity: 30 minutes
    private final long EXPIRATION_TIME = 1000 * 60 * 30;

    // Generate token
    public String generateToken(String userId, String email,String role) {
        return Jwts.builder()
                .setSubject(userId)                // store userId in subject
                .claim("email", email)             // extra data
                .claim("role", role)
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
                .signWith(key)
                .compact();
    }
    public Claims validateToken(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(key)
                .build()
                .parseClaimsJws(token)
                .getBody();  // returns the payload (claims)
    }

    // Extract email
    public String getEmailFromToken(String token) {
        return validateToken(token).get("email", String.class);
    }

    // Extract userId
    public String getUserIdFromToken(String token) {
        return validateToken(token).getSubject();
    }
    
    public String getRoleFromToken(String token)
    {
    	return validateToken(token).get("role", String.class);
    }
}
